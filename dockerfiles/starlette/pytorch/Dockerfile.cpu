FROM registry.internal.huggingface.tech/pytorch_docker/pytorch_1.13.1_sm_cpu:latest

RUN apt-get update -y && \
    apt-get install --no-install-recommends -y \
    libsndfile1 \
    ffmpeg \
    libtcmalloc-minimal4 \
    libnuma1 && \
    rm -rf /var/lib/apt/lists/*

RUN python -m pip install --force --extra-index-url https://download.pytorch.org/whl/cpu torch

# Install python dependencies
# TODO: Update transformers to fix version when 4.27.0 goes out
# TODO: needed for https://github.com/huggingface/transformers/commit/f3a7befffa36170e0266fdc48d3d571a9bd5fa44
RUN --mount=target=requirements.txt,source=starlette_requirements.txt \
    python -m pip install git+https://github.com/huggingface/transformers
    python -m pip install --no-cache-dir -r requirements.txt && \
    python -m pip install optimum-intel intel_extension_for_pytorch

# copy application
COPY src/huggingface_inference_toolkit /app/huggingface_inference_toolkit
COPY src/huggingface_inference_toolkit/webservice_starlette.py /app/webservice_starlette.py

COPY --from=tiangolo/uvicorn-gunicorn-starlette:python3.10 /app/ /app
COPY --from=tiangolo/uvicorn-gunicorn-starlette:python3.10 /start.sh /

# Endpoint parameters
ARG ENDPOINT_IF=0.0.0.0
ARG ENDPOINT_PORT=5000
ENV ENDPOINT_IF ${ENDPOINT_IF}
ENV ENDPOINT_PORT ${ENDPOINT_PORT}

# Intel OMP specific variables
## Number of threads to use when dispatching // sections
ARG OMP_NUM_THREADS=1
ENV OMP_NUM_THREADS ${OMP_NUM_THREADS}

## Time to actively wait (spinning) before sleeping threads while awaiting work
ARG KMP_BLOCKTIME=1s
ENV KMP_BLOCKTIME ${KMP_BLOCKTIME}

## How to use the underlying hardware from a topology perspective
### Use 1 socket (1s),
### Use ${OMP_NUM_THREADS} cores for // sections (${X}c)
### Use 1 thread per core (No SMT) (1t)
ARG KMP_HW_SUBSET=${OMP_NUM_THREADS}c,1t
ENV KMP_HW_SUBSET ${KMP_HW_SUBSET}

# Let's put thread <n> + 1 as close as possible to thread <n>, permuting with 1 (i.e consecutive), offsetting by 0
ENV KMP_AFFINITY=granularity=fine,compact,1,0

# Preload Intel's IOMP and Google TCMalloc
ENV LD_PRELOAD "/usr/lib/x86_64-linux-gnu/libiomp5.so /usr/lib/x86_64-linux-gnu/libtcmalloc_minimal.so.4"

# run app
WORKDIR /app
COPY run_endpoint.sh run_endpoint.sh

ENTRYPOINT ["./run_endpoint.sh"]


